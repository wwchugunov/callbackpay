const TelegramBot = require('node-telegram-bot-api');
const { Pool } = require('pg');
require('dotenv').config();
const express = require('express');
const cors = require('cors');


const app = express();
const port = 3000;
app.use(cors());

app.use(express.json());

app.post('/', (req, res) => {
  console.log('Received POST request');
  console.log('Request body:', req.body);
  const data = req.body;
  const { merchant_id } = req.body;

  // –ù–∞—Ö–æ–¥–∏–º —á–∞—Ç-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ –º–µ—Ä—á–∞–Ω—Ç—É
  const query = 'SELECT chat_id FROM users WHERE merchants @> ARRAY[$1]::TEXT[]';
  const values = [merchant_id];
  pool.query(query, values, (error, result) => {
    if (error) {
      console.error('Error retrieving chat_ids:', error);
      return;
    }

    const rows = result.rows;
    if (rows.length === 0) {
      console.log('No matching chat_ids found for merchantId:', merchant_id);
      return;
    }

    rows.forEach(row => {
      const chatId = row.chat_id;

      let message = `<b>–û–ø–ª–∞—Ç–∞</b>\n`;
      if (req.body.order_status === 'approved') {
        message += `<b>–°—Ç–∞—Ç—É—Å</b><b>   –£—Å–ø–µ—à–Ω–æ ‚úÖ</b>\n`;
      } else if (req.body.order_status === 'processing') {
        message += `<b>–°—Ç–∞—Ç—É—Å</b><b>   –í –æ–±—Ä–∞–±–æ—Ç–∫–µ üî¥</b>\n`;
      } else if (req.body.response_status === 'Loading') {
        message += `<b>–°—Ç–∞—Ç—É—Å</b><b>   –û–ø–µ—Ä–∞—Ü–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ</b>\n`;
      } else if (req.body.response_status === '404') {
        message += `<b>–°—Ç–∞—Ç—É—Å</b><b>   –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</b>\n`;
      }

      const merchant_data = JSON.parse(req.body.merchant_data);
      merchant_data.forEach(item => {
        const value = item.value;
        message += `${item.label}  ${value}\n`;
      });

      message += `<b>–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞</b> ${req.body.response_code}\n`;
      message += `<b>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã</b> ${req.body.payment_system}\n`;

      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é
      let totalAmount = req.body.amount / 100;
      message += `<b>–°—É–º–º–∞</b> ${totalAmount} <b>–≥—Ä–Ω</b> \n`;

      message += `<b>–î–∞—Ç–∞</b> <b>${req.body.order_time}</b>\n`;
      message += `<b>id –ø–ª–∞—Ç–µ–∂–∞</b> ${req.body.order_id}\n`;
      message += `<b>–í–∞–ª—é—Ç–∞</b> ${req.body.currency}\n`;
      message += `<b>–ü–æ—á—Ç–∞</b> ${req.body.sender_email}\n`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ª–±–µ–∫ –∫–∞–∂–¥–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —á–∞—Ç—É
      bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    });
  });

  res.sendStatus(200);
});


app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

const pool = new Pool({
  connectionString: process.env.DB_CONNECTION_STRING,
});

const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });


bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username;

  const userExists = await checkIfUserExists(userId);

  if (!userExists) {
    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:');
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:');
    bot.once('message', async (msg) => {
      const fullName = msg.text;
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:');
      bot.once('message', async (msg) => {
        const companyName = msg.text;
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
        bot.once('message', async (msg) => {
          const phoneNumber = msg.text;

          await createUser(userId, chatId, fullName, companyName, phoneNumber);
          bot.sendMessage(chatId, `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, ${fullName}!`);
          showMainMenu(chatId);
        });
      });
    });
  } else {
    bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, @${username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ.`);
    showMainMenu(chatId);
  }
});


bot.onText(/–°–æ–∑–¥–∞—Ç—å –º–µ—Ä—á–∞–Ω—Ç–∞/, async (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–µ—Ä—á–∞–Ω—Ç–∞:');
  bot.once('message', async (msg) => {
    const merchantName = msg.text;
    await createMerchant(chatId, merchantName);
    bot.sendMessage(chatId, `–ú–µ—Ä—á–∞–Ω—Ç "${merchantName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`);
    showMainMenu(chatId);
  });
});

bot.onText(/–£–¥–∞–ª–∏—Ç—å –º–µ—Ä—á–∞–Ω—Ç–∞/, async (msg) => {
  const chatId = msg.chat.id;
  const merchants = await getMerchants(chatId);

  if (merchants.length === 0) {
    bot.sendMessage(chatId, '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä—á–∞–Ω—Ç–æ–≤.');
    showMainMenu(chatId);
    return;
  }

  const keyboard = merchants.map((merchant) => [{ text: merchant }]);
  const options = {
    reply_markup: {
      keyboard,
      one_time_keyboard: true,
    },
  };

  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä—á–∞–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', options);
  bot.once('message', async (msg) => {
    const merchantName = msg.text;
    await deleteMerchant(chatId, merchantName);
    bot.sendMessage(chatId, `–ú–µ—Ä—á–∞–Ω—Ç "${merchantName}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
    showMainMenu(chatId);
  });
});

async function checkIfUserExists(userId) {
  const query = 'SELECT EXISTS(SELECT 1 FROM users WHERE id = $1)';
  const values = [userId];
  const result = await pool.query(query, values);
  return result.rows[0].exists;
}

async function createUser(userId, chatId, fullName, companyName, phoneNumber) {
  const query = 'INSERT INTO users (id, chat_id, company_name, phone_number, full_name) VALUES ($1, $2, $3, $4, $5)';
  const values = [userId, chatId, companyName, phoneNumber, fullName];
  await pool.query(query, values);
}

async function createMerchant(chatId, merchantName) {
  const query = 'UPDATE users SET merchants = array_append(merchants, $1) WHERE chat_id = $2';
  const values = [merchantName, chatId];
  await pool.query(query, values);
}

async function deleteMerchant(chatId, merchantName) {
  const query = 'UPDATE users SET merchants = array_remove(merchants, $1::text) WHERE chat_id = $2';
  const values = [merchantName, chatId];
  await pool.query(query, values);
}

async function getMerchants(chatId) {
  const query = 'SELECT merchants FROM users WHERE chat_id = $1';
  const values = [chatId];
  const result = await pool.query(query, values);

  if (result.rows.length > 0) {
    try {
      const merchantsArray = result.rows[0].merchants || [];
      console.log('Merchants:', merchantsArray); 
      const merchantNames = merchantsArray.join('\n');
      console.log('Merchant Names:', merchantNames); 

      return merchantsArray;
    } catch (error) {
      console.error('Error parsing merchants:', error);
      return [];
    }
  } else {
    return [];
  }
}

bot.onText(/–í—Å–µ –º–µ—Ä—á–∞–Ω—Ç—ã/, async (msg) => {
  const chatId = msg.chat.id;
  const merchants = await getMerchants(chatId);

  if (merchants.length === 0) {
    bot.sendMessage(chatId, '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä—á–∞–Ω—Ç–æ–≤.');
  } else {
    const merchantNames = merchants.join('\n');
    bot.sendMessage(chatId, `–í–∞—à–∏ –º–µ—Ä—á–∞–Ω—Ç—ã:\n${merchantNames}`);
  }
  showMainMenu(chatId);
});

function showMainMenu(chatId) {
  const keyboard = [['–°–æ–∑–¥–∞—Ç—å –º–µ—Ä—á–∞–Ω—Ç–∞', '–£–¥–∞–ª–∏—Ç—å –º–µ—Ä—á–∞–Ω—Ç–∞'], ['–í—Å–µ –º–µ—Ä—á–∞–Ω—Ç—ã'], ['–ù–∞–∑–∞–¥']];
  const options = {
    reply_markup: {
      keyboard,
      one_time_keyboard: true,
    },
  };

  bot.sendMessage(chatId, '======', options);
}

app.get('/merchants', async (req, res) => {
  try {
    const query = 'SELECT * FROM users';
    const result = await pool.query(query);
    const users = result.rows;
    res.json(users);
  } catch (error) {
    console.error('Error retrieving users:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});